import java.util.ArrayList;
import java.util.Scanner;

public class ExpenseTracker {
    private static ArrayList<Expense> expenses = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("Enter 1 to add an expense");
            System.out.println("Enter 2 to view all expenses");
            System.out.println("Enter 3 to view expense summary");
            System.out.println("Enter 4 to exit");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    addExpense();
                    break;
                case 2:
                    viewAllExpenses();
                    break;
                case 3:
                    viewExpenseSummary();
                    break;
                case 4:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void addExpense() {
        scanner.nextLine();
        System.out.println("Enter expense description:");
        String description = scanner.nextLine();

        System.out.println("Enter expense amount:");
        double amount = scanner.nextDouble();

        scanner.nextLine();
        System.out.println("Enter expense category:");
        String category = scanner.nextLine();

        Expense expense = new Expense(description, amount, category);
        expenses.add(expense);

        System.out.println("Expense added successfully!");
    }

    private static void viewAllExpenses() {
        if (expenses.isEmpty()) {
            System.out.println("No expenses recorded yet.");
        } else {
            System.out.println("All expenses:");
            for (Expense expense : expenses) {
                System.out.println(expense);
            }
        }
    }

    private static void viewExpenseSummary() {
        if (expenses.isEmpty()) {
            System.out.println("No expenses recorded yet.");
        } else {
            System.out.println("Enter 1 to view total expenses for a specific category");
            System.out.println("Enter 2 to view total expenses for a given time period");

            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewTotalExpensesByCategory();
                    break;
                case 2:
                    viewTotalExpensesByTimePeriod();
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void viewTotalExpensesByCategory() {
        scanner.nextLine();
        System.out.println("Enter category:");
        String category = scanner.nextLine();

        double totalExpenses = 0;
        for (Expense expense : expenses) {
            if (expense.getCategory().equalsIgnoreCase(category)) {
                totalExpenses += expense.getAmount();
            }
        }

        System.out.println("Total expenses for category " + category + ": " + totalExpenses);
    }

    private static void viewTotalExpensesByTimePeriod() {
        System.out.println("Enter start date (dd/mm/yyyy):");
        String startDate = scanner.next();

        System.out.println("Enter end date (dd/mm/yyyy):");
        String endDate = scanner.next();

        double totalExpenses = 0;
        for (Expense expense : expenses) {
            if (expense.getDate().compareTo(startDate) >= 0 && expense.getDate().compareTo(endDate) <= 0) {
                totalExpenses += expense.getAmount();
            }
        }

        System.out.println("Total expenses for time period " + startDate + " to " + endDate + ": " + totalExpenses);
    }
}

class Expense {
    private String description;
    private double amount;
    private String category;
    private String date;

    public Expense(String description, double amount, String category) {
        this.description = description;
        this.amount = amount;
        this.category = category;
        this.date = java.time.LocalDate.now().toString();
    }

    public String getDescription() {
        return description;
    }

    public double getAmount() {
        return amount;
    }

    public String getCategory() {
        return category;
    }

    public String getDate() {
        return date;
    }

    @Override
    public String toString() {
        return "Expense{" +
                "description='" + description + '\'' +
                ", amount=" + amount +
                ", category='" + category + '\'' +
                ", date='" + date + '\'' +
                '}';
    }
}
